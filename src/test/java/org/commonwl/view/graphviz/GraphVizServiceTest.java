/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.commonwl.view.graphviz;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import javax.imageio.ImageIO;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;


public class GraphVizServiceTest {

    private GraphVizService graphVizService;

    /**
     * Use a temporary directory for testing
     */
    @TempDir
    public File graphvizFolder;

    /**	
     * Generate a service for testing using the temporary folder
     */
    @BeforeEach
    public void setUp() throws Exception {
        graphVizService = new GraphVizService(graphvizFolder.getAbsolutePath());
    }

    /**
     * Check that a valid png file can be generated from DOT source
     */
    @Test
    public void getGraphAsPng() throws Exception {

    	
        Path dotSource = Paths.get("src/test/resources/graphviz/testWorkflow.dot");
        
        Path png = graphVizService.getGraphPath("workflowid.png",
                readFileToString(dotSource), "png");
        BufferedImage actualImg = ImageIO.read(png.toFile());

        // Check a valid image has been created
        assertTrue(actualImg.getWidth() > 0);
        assertTrue(actualImg.getHeight() > 0);

    }

    /**
     * Check that a valid png file can be generated from DOT source
     */
    @Test
    public void getGraphAsPngStream() throws Exception {

    	
        Path dotSource = Paths.get("src/test/resources/graphviz/testWorkflow.dot");
        
        InputStream png = graphVizService.getGraphStream(
                readFileToString(dotSource), "png");
        BufferedImage actualImg = ImageIO.read(png);

        // Check a valid image has been created
        assertTrue(actualImg.getWidth() > 0);
        assertTrue(actualImg.getHeight() > 0);

    }
    
    
    private String readFileToString(Path path) throws IOException {
    	return new String(Files.readAllBytes(path), StandardCharsets.UTF_8);
	}

    private String readStreamToString(InputStream is) throws IOException {
    	BufferedReader r = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8));
    	StringBuffer sb = new StringBuffer();
    	while (true) { 
    		String line = r.readLine();
    		if (line == null) break;
    		sb.append(line);
    		sb.append("\n"); // NOTE: This translates all EOL to \n and may add \n at EOF 
    	}
    	return sb.toString();
	}

    
	/**
     * Check that a valid svg file can be generated from DOT source
     */
    @Test
    public void getGraphAsSvg() throws Exception {

    	Path dotSource = Paths.get("src/test/resources/graphviz/testWorkflow.dot");
       
        Path svg = graphVizService.getGraphPath("workflowid.svg",
                readFileToString(dotSource), "svg");
        String svgString = readFileToString(svg);        
        assertTrue(svgString.contains("Generated by graphviz"));

    }

	/**
     * Check that a valid svg file can be generated from DOT source
     */
    @Test
    public void getGraphAsSvgStream() throws Exception {

    	Path dotSource = Paths.get("src/test/resources/graphviz/testWorkflow.dot");
       
        InputStream svg = graphVizService.getGraphStream(readFileToString(dotSource), "svg");
        String svgString = readStreamToString(svg);        
        assertTrue(svgString.contains("Generated by graphviz"));
    }    
    
    /**
     * Check that an xdot file can be generated from DOT source
     */
    @Test
    public void getGraphAsXDot() throws Exception {

    	Path dotSource = Paths.get("src/test/resources/graphviz/testWorkflow.dot");
    	Path xdot = graphVizService.getGraphPath("workflowid.dot",
                readFileToString(dotSource), "xdot");
        String xdotString = readFileToString(xdot);
        assertTrue(xdotString.length() > 0);

    }

    /**
     * Check that an xdot stream can be generated from DOT source
     */
    @Test
    public void getGraphAsXDotStream() throws Exception {
    	Path dotSource = Paths.get("src/test/resources/graphviz/testWorkflow.dot");
    	InputStream xdot = graphVizService.getGraphStream(
                readFileToString(dotSource), "xdot");
        String xdotString = readStreamToString(xdot);
        assertTrue(xdotString.length() > 0);

    }
    
    /**
     * Check that files in the graphVizFolder can be
     * deleted with deleteCache()
     */
    @Test
    public void deleteCache() throws Exception {

        File png = new File(graphvizFolder, "exampleid.png");
        File svg = new File(graphvizFolder, "exampleid.svg");
        File dot = new File(graphvizFolder, "exampleid.dot");

        graphVizService.deleteCache("exampleid");

        assertFalse(png.exists());
        assertFalse(svg.exists());
        assertFalse(dot.exists());

    }

}